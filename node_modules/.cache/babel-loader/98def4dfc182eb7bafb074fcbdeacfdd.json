{"ast":null,"code":"import { v1 } from 'uuid';\nexport const store = {\n  _state: {\n    profilePage: {\n      postsData: [{\n        id: v1(),\n        message: 'Hello my friend!',\n        likesCount: 22\n      }, {\n        id: v1(),\n        message: 'Hello samurai!',\n        likesCount: 12\n      }, {\n        id: v1(),\n        message: 'You are the best!',\n        likesCount: 24\n      }, {\n        id: v1(),\n        message: 'Good night!',\n        likesCount: 15\n      }],\n      newPostText: 'it-kamasutra.com'\n    },\n    dialogsPage: {\n      dialogsData: [{\n        id: v1(),\n        name: 'Dimych'\n      }, {\n        id: v1(),\n        name: 'Sveta'\n      }, {\n        id: v1(),\n        name: 'Valera'\n      }, {\n        id: v1(),\n        name: 'Victor'\n      }, {\n        id: v1(),\n        name: 'Sasha'\n      }, {\n        id: v1(),\n        name: 'Andrey'\n      }, {\n        id: v1(),\n        name: 'Igor'\n      }]\n    },\n    messagePage: {\n      messagesData: [{\n        id: v1(),\n        message: 'Hello',\n        likesCount: 22\n      }, {\n        id: v1(),\n        message: 'How is your learning?',\n        likesCount: 36\n      }, {\n        id: v1(),\n        message: 'Yo',\n        likesCount: 23\n      }, {\n        id: v1(),\n        message: 'You good!',\n        likesCount: 55\n      }, {\n        id: v1(),\n        message: 'My name is Mike',\n        likesCount: 12\n      }],\n      newPageMessage: 'enter a new message'\n    }\n  },\n\n  /*updateNewPostText(newText: string) {\n      this._state.profilePage.newPostText = newText\n      this.callSubscriber()\n  },\n  addPost() {\n      let newPost: PostDataType = {\n          id: v1(),\n          message: this._state.profilePage.newPostText,\n          likesCount: 0\n      }\n      this._state.profilePage.postsData.push(newPost)\n      this._state.profilePage.newPostText = ''\n      this.callSubscriber()\n  },*/\n  callSubscriber() {\n    console.log('State chenged');\n  },\n\n  subscribe(abserver) {\n    this.callSubscriber = abserver;\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  dispatch(action) {\n    if (action.type === 'ADD-POST') {\n      const newPost = {\n        id: v1(),\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.postsData.push(newPost);\n\n      this._state.profilePage.newPostText = '';\n      this.callSubscriber();\n    } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\n      if (action.newText != null) {\n        this._state.profilePage.newPostText = action.newText;\n      }\n\n      this.callSubscriber();\n    } else if (action.type === 'ADD-MESSAGE') {\n      const newMessage = {\n        id: v1(),\n        message: this._state.messagePage.newPageMessage,\n        likesCount: 0\n      };\n\n      this._state.messagePage.messagesData.push(newMessage);\n\n      this._state.messagePage.newPageMessage = '';\n      this.callSubscriber();\n    } else if (action.type === 'UPDATE-NEW-MESSAGE-TEXT') {\n      if (action.newPageMessage != null) {\n        this._state.messagePage.newPageMessage = action.newPageMessage;\n      }\n\n      this.callSubscriber();\n    }\n  }\n\n};\n/*export const addPostActionCreator = ():AddPostActionType => ({type: 'ADD-POST'})\n\nexport const updateNewPostTextActionCreator = (text: string):UpdateNewPostTextActionType => (\n    {type: 'UPDATE-NEW-POST-TEXT', newText: text}\n)*/\n\nexport const addPostActionCreator = () => ({\n  type: 'ADD-POST'\n});\nexport const updateNewPostTextActionCreator = text => ({\n  type: 'UPDATE-NEW-POST-TEXT',\n  newText: text\n});\nexport const addMessageActionCreator = () => ({\n  type: 'ADD-MESSAGE'\n});\nexport const updateMessageActionCreator = text => ({\n  type: 'UPDATE-NEW-MESSAGE-TEXT',\n  newPageMessage: text\n});","map":{"version":3,"sources":["E:/React/samurai-way/src/redux/state.ts"],"names":["v1","store","_state","profilePage","postsData","id","message","likesCount","newPostText","dialogsPage","dialogsData","name","messagePage","messagesData","newPageMessage","callSubscriber","console","log","subscribe","abserver","getState","dispatch","action","type","newPost","push","newText","newMessage","addPostActionCreator","updateNewPostTextActionCreator","text","addMessageActionCreator","updateMessageActionCreator"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,MAAjB;AAmEA,OAAO,MAAMC,KAAgB,GAAG;AAC5BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,SAAS,EAAE,CACP;AAACC,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,kBAApB;AAAwCC,QAAAA,UAAU,EAAE;AAApD,OADO,EAEP;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,gBAApB;AAAsCC,QAAAA,UAAU,EAAE;AAAlD,OAFO,EAGP;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,mBAApB;AAAyCC,QAAAA,UAAU,EAAE;AAArD,OAHO,EAIP;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,aAApB;AAAmCC,QAAAA,UAAU,EAAE;AAA/C,OAJO,CADF;AAOTC,MAAAA,WAAW,EAAE;AAPJ,KADT;AAUJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,WAAW,EAAE,CACT;AAACL,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OADS,EAET;AAACN,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OAFS,EAGT;AAACN,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OAHS,EAIT;AAACN,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OAJS,EAKT;AAACN,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OALS,EAMT;AAACN,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OANS,EAOT;AAACN,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OAPS;AADJ,KAVT;AAqBJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,YAAY,EAAE,CACV;AAACR,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,OAApB;AAA6BC,QAAAA,UAAU,EAAE;AAAzC,OADU,EAEV;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,uBAApB;AAA6CC,QAAAA,UAAU,EAAE;AAAzD,OAFU,EAGV;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,IAApB;AAA0BC,QAAAA,UAAU,EAAE;AAAtC,OAHU,EAIV;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,WAApB;AAAiCC,QAAAA,UAAU,EAAE;AAA7C,OAJU,EAKV;AAACF,QAAAA,EAAE,EAAEL,EAAE,EAAP;AAAWM,QAAAA,OAAO,EAAE,iBAApB;AAAuCC,QAAAA,UAAU,EAAE;AAAnD,OALU,CADL;AAONO,MAAAA,cAAc,EAAE;AAPV;AArBT,GADoB;;AAiC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,cAAc,GAAG;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,GAjD2B;;AAkD5BC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,SAAKJ,cAAL,GAAsBI,QAAtB;AACH,GApD2B;;AAqD5BC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKlB,MAAZ;AACH,GAvD2B;;AAyD5BmB,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,QAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,YAAMC,OAAqB,GAAG;AAC1BnB,QAAAA,EAAE,EAAEL,EAAE,EADoB;AAE1BM,QAAAA,OAAO,EAAE,KAAKJ,MAAL,CAAYC,WAAZ,CAAwBK,WAFP;AAG1BD,QAAAA,UAAU,EAAE;AAHc,OAA9B;;AAKA,WAAKL,MAAL,CAAYC,WAAZ,CAAwBC,SAAxB,CAAkCqB,IAAlC,CAAuCD,OAAvC;;AACA,WAAKtB,MAAL,CAAYC,WAAZ,CAAwBK,WAAxB,GAAsC,EAAtC;AACA,WAAKO,cAAL;AACH,KATD,MASO,IAAIO,MAAM,CAACC,IAAP,KAAgB,sBAApB,EAA4C;AAC/C,UAAID,MAAM,CAACI,OAAP,IAAkB,IAAtB,EAA4B;AACxB,aAAKxB,MAAL,CAAYC,WAAZ,CAAwBK,WAAxB,GAAsCc,MAAM,CAACI,OAA7C;AACH;;AACD,WAAKX,cAAL;AACH,KALM,MAKA,IAAIO,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;AACtC,YAAMI,UAAuB,GAAG;AAC5BtB,QAAAA,EAAE,EAAEL,EAAE,EADsB;AAE5BM,QAAAA,OAAO,EAAE,KAAKJ,MAAL,CAAYU,WAAZ,CAAwBE,cAFL;AAG5BP,QAAAA,UAAU,EAAE;AAHgB,OAAhC;;AAKA,WAAKL,MAAL,CAAYU,WAAZ,CAAwBC,YAAxB,CAAqCY,IAArC,CAA0CE,UAA1C;;AACA,WAAKzB,MAAL,CAAYU,WAAZ,CAAwBE,cAAxB,GAAyC,EAAzC;AACA,WAAKC,cAAL;AACH,KATM,MASA,IAAIO,MAAM,CAACC,IAAP,KAAgB,yBAApB,EAA+C;AAClD,UAAID,MAAM,CAACR,cAAP,IAAyB,IAA7B,EAAmC;AAC/B,aAAKZ,MAAL,CAAYU,WAAZ,CAAwBE,cAAxB,GAAyCQ,MAAM,CAACR,cAAhD;AACH;;AACD,WAAKC,cAAL;AACH;AAEJ;;AAxF2B,CAAzB;AA2FP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMa,oBAAoB,GAAG,OAAO;AAACL,EAAAA,IAAI,EAAE;AAAP,CAAP,CAA7B;AAEP,OAAO,MAAMM,8BAA8B,GAAIC,IAAD,KAC1C;AAACP,EAAAA,IAAI,EAAE,sBAAP;AAA+BG,EAAAA,OAAO,EAAEI;AAAxC,CAD0C,CAAvC;AAIP,OAAO,MAAMC,uBAAuB,GAAG,OAAO;AAACR,EAAAA,IAAI,EAAE;AAAP,CAAP,CAAhC;AAEP,OAAO,MAAMS,0BAA0B,GAAIF,IAAD,KACtC;AAACP,EAAAA,IAAI,EAAE,yBAAP;AAAkCT,EAAAA,cAAc,EAAEgB;AAAlD,CADsC,CAAnC","sourcesContent":["import {v1} from 'uuid';\n\n\nexport type MessageType = {\n    id: string\n    message: string\n    likesCount: number\n}\n\nexport type DialogsType = {\n    id: string\n    name: string\n}\n\nexport type PostDataType = {\n    id: string\n    message: string\n    likesCount: number\n}\n\nexport type MessagePageType = {\n    messagesData: Array<MessageType>\n    newPageMessage: string\n}\n\nexport type DialogsPageType = {\n    dialogsData: Array<DialogsType>\n}\n\nexport type ProfilePageType = {\n    postsData: Array<PostDataType>\n    newPostText: string\n}\n\nexport type StateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    messagePage: MessagePageType\n}\n\n/*export type AddPostActionType = {\n    type: 'ADD-POST'\n}*/\n\n/*export type UpdateNewPostTextActionType = {\n    type: 'UPDATE-NEW-POST-TEXT'\n    newText: string\n}*/\n\n//export type ActionsType = AddPostActionType | UpdateNewPostTextActionType\nexport type ActionsType =\n    ReturnType<typeof addPostActionCreator>\n    | ReturnType<typeof updateNewPostTextActionCreator>\n    | ReturnType<typeof addMessageActionCreator>\n    | ReturnType<typeof updateMessageActionCreator>\n\n\nexport type StoreType = {\n    _state: StateType\n    /*updateNewPostText: (newText: string) => void\n    addPost: () => void*/\n    callSubscriber: () => void\n    subscribe: (abserver: () => void) => void\n    getState: () => StateType\n    dispatch: (action: ActionsType) => void\n}\n\nexport const store: StoreType = {\n    _state: {\n        profilePage: {\n            postsData: [\n                {id: v1(), message: 'Hello my friend!', likesCount: 22},\n                {id: v1(), message: 'Hello samurai!', likesCount: 12},\n                {id: v1(), message: 'You are the best!', likesCount: 24},\n                {id: v1(), message: 'Good night!', likesCount: 15},\n            ],\n            newPostText: 'it-kamasutra.com'\n        },\n        dialogsPage: {\n            dialogsData: [\n                {id: v1(), name: 'Dimych'},\n                {id: v1(), name: 'Sveta'},\n                {id: v1(), name: 'Valera'},\n                {id: v1(), name: 'Victor'},\n                {id: v1(), name: 'Sasha'},\n                {id: v1(), name: 'Andrey'},\n                {id: v1(), name: 'Igor'},\n            ]\n        },\n        messagePage: {\n            messagesData: [\n                {id: v1(), message: 'Hello', likesCount: 22},\n                {id: v1(), message: 'How is your learning?', likesCount: 36},\n                {id: v1(), message: 'Yo', likesCount: 23},\n                {id: v1(), message: 'You good!', likesCount: 55},\n                {id: v1(), message: 'My name is Mike', likesCount: 12},\n            ], newPageMessage: 'enter a new message'\n        }\n\n    },\n    /*updateNewPostText(newText: string) {\n        this._state.profilePage.newPostText = newText\n        this.callSubscriber()\n    },\n    addPost() {\n        let newPost: PostDataType = {\n            id: v1(),\n            message: this._state.profilePage.newPostText,\n            likesCount: 0\n        }\n        this._state.profilePage.postsData.push(newPost)\n        this._state.profilePage.newPostText = ''\n        this.callSubscriber()\n    },*/\n    callSubscriber() {\n        console.log('State chenged')\n    },\n    subscribe(abserver) {\n        this.callSubscriber = abserver\n    },\n    getState() {\n        return this._state\n    },\n\n    dispatch(action) {\n        if (action.type === 'ADD-POST') {\n            const newPost: PostDataType = {\n                id: v1(),\n                message: this._state.profilePage.newPostText,\n                likesCount: 0\n            }\n            this._state.profilePage.postsData.push(newPost)\n            this._state.profilePage.newPostText = '';\n            this.callSubscriber();\n        } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\n            if (action.newText != null) {\n                this._state.profilePage.newPostText = action.newText;\n            }\n            this.callSubscriber()\n        } else if (action.type === 'ADD-MESSAGE') {\n            const newMessage: MessageType = {\n                id: v1(),\n                message: this._state.messagePage.newPageMessage,\n                likesCount: 0\n            }\n            this._state.messagePage.messagesData.push(newMessage)\n            this._state.messagePage.newPageMessage = '';\n            this.callSubscriber();\n        } else if (action.type === 'UPDATE-NEW-MESSAGE-TEXT') {\n            if (action.newPageMessage != null) {\n                this._state.messagePage.newPageMessage = action.newPageMessage;\n            }\n            this.callSubscriber()\n        }\n\n    }\n}\n\n/*export const addPostActionCreator = ():AddPostActionType => ({type: 'ADD-POST'})\n\nexport const updateNewPostTextActionCreator = (text: string):UpdateNewPostTextActionType => (\n    {type: 'UPDATE-NEW-POST-TEXT', newText: text}\n)*/\n\nexport const addPostActionCreator = () => ({type: 'ADD-POST'} as const)\n\nexport const updateNewPostTextActionCreator = (text: string) => (\n    {type: 'UPDATE-NEW-POST-TEXT', newText: text} as const\n)\n\nexport const addMessageActionCreator = () => ({type: 'ADD-MESSAGE'} as const)\n\nexport const updateMessageActionCreator = (text: string) => (\n    {type: 'UPDATE-NEW-MESSAGE-TEXT', newPageMessage: text} as const\n)"]},"metadata":{},"sourceType":"module"}