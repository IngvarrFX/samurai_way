{"version":3,"file":"static/js/112.990601cb.chunk.js","mappings":"4OACA,GAAgB,aAAe,mCAAmC,MAAQ,6B,+CCUpEA,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,iBAAKG,UAAWC,EAAAA,YAAqB,KAAOF,EAAWE,EAAAA,MAAe,IAAtE,WACI,yBACKH,IAEJC,IAAY,0BAAOF,QAKnBK,EAAwC,SAACC,GAClD,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBR,MAAd,OAAoCQ,EAApC,IACA,OAAO,SAACT,GAAD,kBAAiBS,GAAjB,cAAwB,uCAAcC,GAAWC,QAG/CC,EAAqC,SAACH,GAC/C,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBR,MAAd,OAAoCQ,EAApC,IACA,OAAO,SAACT,GAAD,kBAAiBS,GAAjB,cAAwB,oCAAWC,GAAWC,QAGlD,SAASE,EAAyCC,EACAC,EACAC,EACAC,GACwB,IAAxBR,EAAuB,uDAAf,GAAIS,EAAW,uDAAJ,GACxE,OAAO,4BACH,SAACC,EAAA,GAAD,QAAOL,YAAaA,EAAaC,KAAMA,EAChCK,SAAUJ,EACVC,UAAWA,GACPR,IAJR,IAKCS,O,sEChCPG,E,mECVL,EAA0B,yB,uCCA1B,GAAgB,iBAAmB,sCAAsC,aAAe,kCAAkC,SAAW,+B,UCArI,EAAyB,8B,SCQZC,EAAyB,SAACb,GAG/B,OAAsBc,EAAAA,EAAAA,WAAS,GAA/B,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAASd,EAAMiB,QAAzC,eAAOA,EAAP,KAAeC,EAAf,KAiBA,OAJAC,EAAAA,EAAAA,YAAU,WACND,EAAUlB,EAAMiB,UAClB,CAACjB,EAAMiB,UAGL,gBAAKpB,UAAWuB,EAAhB,SACML,GAQE,4BACI,kCADJ,KAEI,kBAAOM,WAAS,EAACC,SAxBZ,SAACC,GAClBL,EAAUK,EAAEC,cAAcC,QAuB2BC,OArBlC,WACnBV,GAAQ,GACRhB,EAAM2B,oBAAoBV,IAoBPQ,MAAOR,QATlB,0BACI,iBACIW,cArBC,WACjBZ,GAAQ,IAmBI,WACiC,kCADjC,KACiDhB,EAAMiB,QAAU,qCC3B5EY,EAAU,SAAC7B,GACpB,OACI,4BACI,cAAGH,UAAWuB,EAAAA,SAAd,SAA+BpB,EAAM8B,eADzC,IAC4D9B,EAAM+B,iB,WLDrEnB,SAAAA,GAAAA,EAAAA,GAAAA,KAAAA,EAAAA,OAAAA,SAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,YAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,UAAAA,EAAAA,QAAAA,UAAAA,CAAAA,IAAAA,EAAAA,KAWE,IAAMoB,EAAc,SAAChC,GACxB,OACI,2BACKA,EAAMiC,aAAc,0BACjB,SAACC,EAAA,EAAD,CAAQd,MAAO,CAACe,OAAQ,OAAQC,QAAS,YAAaC,QAASrC,EAAMsC,OAArE,qBAEJ,2BAAM,yCACN,4BAAOtC,EAAMuC,QAAQC,SAArB,QACA,mBACA,6BACI,sCADJ,IACuBC,OAAOC,KAAK1C,EAAMuC,QAAQI,UAAUC,KAAI,SAACC,GAC5D,OAAO,SAAChB,EAAD,CACSC,aAAce,EACdd,aAAc/B,EAAMuC,QAAQI,SAASE,IAFhCA,UAKzB,mBACA,2BAAM,kDACN,0BAAO7C,EAAMuC,QAAQO,eAAiB,MAAQ,QAC9C,mBACA,2BAAM,uDACN,yBAAM9C,EAAMuC,QAAQQ,6BACpB,mBACA,2BAAM,yCACN,yBAAM/C,EAAMuC,QAAQS,c,uCMjC1BC,GAAcC,EAAAA,EAAAA,GAAU,IACxBC,GAAeD,EAAAA,EAAAA,GAAU,KAyDzBE,GAA2BC,EAAAA,EAAAA,GAAgD,CAACC,KAAM,eAAvDD,EAtDmF,SAACrD,GAAW,IAGvHY,EAYL,OAf2H,SAGtHA,GAAAA,EAHsH,QAGtHA,EAHsH,gBAGtHA,EAHsH,oBAGtHA,EAHsH,kBAGtHA,EAHsH,sBAGtHA,EAHsH,oBAGtHA,EAHsH,kBAGtHA,EAHsH,mBAGtHA,IAAAA,EAHsH,MAgBvH,kBAAM2C,SAAUvD,EAAMwD,aAAtB,WACI,0BACI,SAAC9C,EAAA,EAAD,CAAOL,YAAY,YAAYG,UAAWL,EAAAA,GAAOG,KAAK,WAAWmD,KAAK,OAC/D9C,SAAU,CAAC+C,EAAAA,EAAUT,QAEhC,0BACI,SAACvC,EAAA,EAAD,CAAOL,YAAY,0BAA0BG,UAAWT,EAAAA,GAAUO,KAAK,4BAChEmD,KAAK,OACL9C,SAAU,CAAC+C,EAAAA,EAAUP,QAEhC,0BACI,SAACzC,EAAA,EAAD,CAAOL,YAAY,YAAYG,UAAWT,EAAAA,GAAUO,KAAK,UAAUmD,KAAK,OACjE9C,SAAU,CAAC+C,EAAAA,EAAUP,QAEhC,4BACI,SAACzC,EAAA,EAAD,CAAOF,UAAU,QAAQF,KAAK,iBAAiBmD,KAAK,aADxD,yBAGA,4BACI,oCADJ,KACsBhB,OAAOC,KAAK1C,EAAMuC,QAAQI,UAAUC,KAAI,SAAAC,GAC1D,OAAO,0BAEH,yBAAIA,EAAJ,MAAWzC,EAAAA,EAAAA,IAAYyC,EAAK,YAAcA,EAAK,GAAI1C,EAAAA,QAFtC0C,SAMpB7C,EAAMN,QACP,0BACI,4BAASM,EAAMN,WAGnB,0BACI,6CAShB,ICrDaiE,EAAc,SAAC3D,GACxB,OAAwBc,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMuC,EAAQ,mCAAG,WAAOK,GAAP,iFACP5D,EAAM6D,kBAAkBD,GADjB,OAEb5C,GAAQ,GAFK,2CAAH,sDAKR8C,GAAsBC,EAAAA,EAAAA,cAAY,SAACxC,GACjCA,EAAEyC,OAAOC,OACL1C,EAAEyC,OAAOC,MAAMC,QACflE,EAAMmE,UAAU5C,EAAEyC,OAAOC,MAAM,MAGxC,CAACjE,EAAMmE,YAEV,OACI,gBAAKtE,UAAWuB,EAAAA,UAAhB,UACI,iBAAKvB,UAAWuB,EAAAA,iBAAhB,WACI,kBAAMvB,UAAWuB,EAAAA,aAAjB,WACI,gBAAKgD,IAAKpE,EAAMuC,QAAQ8B,OAAOC,MAAQtE,EAAMuC,QAAQ8B,OAAOC,MAAQC,EAAeC,IAAI,KACtFxE,EAAMiC,aACP,kBAAOpC,UAAW,kBAAmB4D,KAAM,OAAQnC,SAAUwC,QAEjE,SAACjD,EAAD,CACII,OAAQjB,EAAMiB,OACdU,oBAAqB3B,EAAM2B,sBAC9BZ,GACK,SAAC0D,EAAD,CACEC,cAAe1E,EAAMuC,QACrBA,QAASvC,EAAMuC,QACfgB,SAAUA,KACZ,SAACvB,EAAD,CACEO,QAASvC,EAAMuC,QACfN,WAAYjC,EAAMiC,WAClBK,OAAQ,WACJtB,GAAQ,Y,UCtDpC,EAAuB,mBCQV2D,EAAgC,SAAC3E,GAC1C,OACI,iBAAKH,UAAWuB,EAAhB,WACI,gBACIgD,IAAI,0HACJI,IAAI,KACPxE,EAAM4E,SACP,4BACI,oCADJ,IACwB5E,EAAM6E,kBChB1C,EAA6B,4BAA7B,EAAiE,uB,UCS3DC,GAAc5B,EAAAA,EAAAA,GAAU,IAgBxB6B,GAAc1B,EAAAA,EAAAA,GAAyB,CACzCC,KAAM,QADUD,EAf4C,SAACrD,GAC7D,OACI,kBAAMuD,SAAUvD,EAAMwD,aAAtB,WACI,0BACI,SAAC9C,EAAA,EAAD,CAAOL,YAAY,eAAeG,UAAWT,EAAAA,GAAUO,KAAK,cAAcmD,KAAK,OACxE9C,SAAU,CAAC+C,EAAAA,EAAUoB,QAEhC,0BACI,qDAgBHE,EAAU,SAAChF,GACpB,IAAMuD,GAAWQ,EAAAA,EAAAA,cAAY,SAACH,EAAyBqB,GACnDjF,EAAMkF,mBAAmBtB,EAASuB,aAClCF,GAASG,EAAAA,EAAAA,IAAM,WAChB,CAACpF,EAAMkF,qBACV,OACI,0BACI,SAACH,EAAD,CAAaxB,SAAUA,OCvBtB8B,EAAUC,EAAAA,MAAW,SAACtF,GAE/B,IAAIuF,EAAevF,EAAMwF,KAAK5C,KAAI,SAAC6C,GAAD,OAAO,SAACd,EAAD,CAAiBC,QAASa,EAAEb,QAASC,WAAYY,EAAEC,YAAxCD,EAAEE,OAQtD,OACI,gBAAK9F,UAAWuB,EAAhB,UACI,4BACI,sCACA,0BACI,SAAC4D,EAAD,CAASE,mBAVE,SAACzD,GACxBzB,EAAM4F,QAAQnE,SAWN,gBAAK5B,UAAWuB,EAAhB,SACKmE,YCLrB,GAAeM,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAhBC,SAACC,GACrB,MAAO,CACHP,KAAMO,EAAMC,YAAYC,cAML,SAAChB,GACxB,MAAO,CACHW,QAAS,SAACnE,GACNwD,GAASiB,EAAAA,EAAAA,IAAqBzE,SAK1C,CAAqE4D,GCdxDc,EAAU,SAACnG,GAEpB,OACI,iBAAKH,UAAWuB,EAAhB,YACKpB,EAAMuC,UACD,SAACoB,EAAD,CACEQ,UAAWnE,EAAMmE,UACjBlC,WAAYjC,EAAMiC,WAClBM,QAASvC,EAAMuC,QACftB,OAAQjB,EAAMiB,OACdU,oBAAqB3B,EAAM2B,oBAC3BkC,kBAAmB7D,EAAM6D,qBAIjC,SAACuC,EAAD,Q,oBCSNC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYrG,GAAsC,kCACxCA,GAyCT,OAxCA,sCAED,WACI,IAAIsG,GAAyBC,KAAKvG,MAAMwG,MAAMC,OAAOH,OAChDA,IACDA,EAASC,KAAKvG,MAAM0G,mBAEhBH,KAAKvG,MAAM2G,QAAQC,KAAK,UAG3BN,GAGDC,KAAKvG,MAAM6G,eAAeP,GAC1BC,KAAKvG,MAAM8G,iBAAiBR,IAH5BS,QAAQrH,MAAM,qEAKrB,+BAED,WACI6G,KAAKS,mBAGR,gCAED,SAAmBC,EAAyCC,GACpDD,EAAUT,MAAMC,OAAOH,SAAWC,KAAKvG,MAAMwG,MAAMC,OAAOH,QAC1DC,KAAKS,mBAEZ,oBAED,WACI,OACI,iCAAE,SAACb,EAAD,CACE5D,QAASgE,KAAKvG,MAAMuC,QACpBtB,OAAQsF,KAAKvG,MAAMiB,OACnBgB,YAAasE,KAAKvG,MAAMwG,MAAMC,OAAOH,OACrCnC,UAAWoC,KAAKvG,MAAMmE,UACtBN,kBAAmB0C,KAAKvG,MAAM6D,kBAC9BlC,oBAAqB4E,KAAKvG,MAAM2B,sBANpC,WAQP,EA3CC0E,CAAyBf,EAAAA,WAiF/B,GAAeO,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAlCpB,SAACC,GACrB,MAAO,CACHxD,QAASwD,EAAMC,YAAYzD,QAC3BtB,OAAQ8E,EAAMC,YAAY/E,OAC1BkG,OAAQpB,EAAMqB,KAAKD,OACnBT,iBAAkBX,EAAMqB,KAAKD,WAMV,SAAClC,GACxB,MACI,CACI4B,eAAgB,SAACM,GACblC,GAASoC,EAAAA,EAAAA,IAAgBF,KAE7BL,iBAAkB,SAACK,GACflC,GAASqC,EAAAA,EAAAA,IAAwBH,KAErCxF,oBAAqB,SAACV,GAClBgE,GAASsC,EAAAA,EAAAA,IAA2BtG,KAExCkD,UAAW,SAACqD,GACRvC,GAASwC,EAAAA,EAAAA,IAAwBD,KAErC3D,kBAAmB,SAAC2B,GAChB,OAAOP,GAASyC,EAAAA,EAAAA,IAAyBlC,SAO0GmC,EAAAA,GAAYC,EAAAA,EAA/K,CAAiMvB,I,wIChH3LwB,EAAkB,SAAC9B,GACrB,MAAO,CACH+B,OAAQ/B,EAAMqB,KAAKU,SASpB,SAASF,EAAoBG,GAShC,OADgClC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAQ+B,GAAhBhC,EAPP,SAAC7F,GACtB,IAAK8H,EAAwB9H,EAAxB8H,OAAW5H,GAAhB,OAA6BF,EAA7B,GACA,OAAK8H,GACE,SAACC,GAAD,UAAe7H,KADF,SAAC,KAAD,CAAU8H,GAAI,gB,4ECtBnC,IAAMtE,EAA2B,SAACjC,GAAD,OAAWA,OAAQwG,EAAY,qBAK1D/E,EAA2B,SAACA,GAAD,OAAuC,SAACzB,GAC5E,GAAIA,EAAMyC,OAAShB,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e","sources":["webpack://samurai-way/./src/common/FormControls/FormControls.module.css?d07c","common/FormControls/FormControls.tsx","components/Profile/ProfileInfo/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileStatus.module.css?8507","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","form/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControls\":\"FormControls_formControls__JFCnc\",\"error\":\"FormControls_error__Zkh-E\"};","import React from \"react\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport { ValidatorsType } from \"../../utils/validators/validators\"\nimport styles from \"./FormControls.module.css\"\n\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                                                         name: FormKeysType,\n                                                         validators: Array<ValidatorsType>,\n                                                         component: React.FC<WrappedFieldProps>,\n                                                         props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","import {ProfileInfoType} from \"../../../redux/profileReducer\";\nimport React from \"react\";\nimport {Contact} from \"./Contact\";\nimport {Button} from \"@mui/material\";\n\ntype ProfileDataType = {\n    profile: ProfileInfoType\n    isOwnPhoto: boolean\n    onEdit: () => void\n}\n\nenum ObjPropNameType {\n    vk = \"vk\",\n    github = \"github\",\n    facebook = \"facebook\",\n    twitter = \"twitter\",\n    instagram = \"instagram\",\n    mainLink = \"mainLink\",\n    website = \"website\",\n    youtube = \"youtube\"\n}\n\nexport const ProfileData = (props: ProfileDataType) => {\n    return (\n        <div>\n            {props.isOwnPhoto && <div>\n                <Button style={{margin: \"5px\"}} variant={\"contained\"} onClick={props.onEdit}>Edit</Button>\n            </div>}\n            <span><b>FullName: </b></span>\n            <span>{props.profile.fullName} </span>\n            <hr></hr>\n            <span>\n                <b>Contacts: </b> {Object.keys(props.profile.contacts).map((key) => {\n                return <Contact key={key}\n                                contactTitle={key}\n                                contactValue={props.profile.contacts[key as ObjPropNameType]}/>\n            })}\n            </span>\n            <hr></hr>\n            <span><b>Looking for a job: </b></span>\n            <span>{props.profile.lookingForAJob ? \"Yes\" : \"No\"}</span>\n            <hr></hr>\n            <span><b>My professional skills: </b></span>\n            <div>{props.profile.lookingForAJobDescription}</div>\n            <hr></hr>\n            <span><b>About me: </b></span>\n            <div>{props.profile.aboutMe}</div>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"profilePhoto\":\"ProfileInfo_profilePhoto__GTuwT\",\"contacts\":\"ProfileInfo_contacts__hKq1Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__dcr2q\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport style from \"./ProfileStatus.module.css\"\n\ntype PropsType = {\n    status: string\n    updateProfileStatus: (status: string) => void\n}\n\n\nexport const ProfileStatusWithHooks = (props:PropsType ) => {\n\n\n        const [edit, setEdit]=useState(false)\n        const [status, setStatus]=useState(props.status)\n\n        const activateEdit = () => {\n            setEdit(true)\n        }\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            setStatus(e.currentTarget.value)\n        }\n        const deActivateEdit = () => {\n            setEdit(false)\n            props.updateProfileStatus(status)\n        }\n\n        useEffect(()=> {\n            setStatus(props.status)\n        },[props.status])\n\n        return (\n            <div className={style.status}>\n                {!edit\n                    ?\n                    <div>\n                        <div\n                            onDoubleClick={activateEdit}><b>Status</b>: {props.status || \"Change your profile status\"}</div>\n                        {/*<button onClick={requestStat}>request Status</button>*/}\n                    </div>\n                    :\n                    <div>\n                        <b>Status</b>:\n                        <input autoFocus onChange={changeStatus} onBlur={deActivateEdit}\n                               value={status}/>\n                    </div>\n                }\n            </div>\n        )\n\n}","import style from \"./ProfileInfo.module.css\";\nimport React from \"react\";\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\n\nexport const Contact = (props: ContactPropsType) => {\n    return (\n        <div>\n            <b className={style.contacts}>{props.contactTitle}</b>:{props.contactValue}\n        </div>\n    )\n}","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormControls/FormControls\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport React from \"react\";\nimport {ProfileInfoType} from \"../../redux/profileReducer\";\n\n\nexport type ProfileDataFormType = {\n    profile: ProfileInfoType\n}\n\ntype ProfileTypeKeys = GetStringKeys<ProfileInfoType>\n\nconst maxLength30 = maxLength(30)\nconst maxLength100 = maxLength(100)\n\n\nexport const ProfileForm: React.FC<InjectedFormProps<ProfileInfoType, ProfileDataFormType> & ProfileDataFormType> = (props) => {\n\n\n    enum ObjPropNameType {\n        vk = \"vk\",\n        github = \"github\",\n        facebook = \"facebook\",\n        twitter = \"twitter\",\n        instagram = \"instagram\",\n        mainLink = \"mainLink\",\n        website = \"website\",\n        youtube = \"youtube\"\n    }\n\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder=\"Full Name\" component={Input} name=\"fullName\" type=\"text\"\n                       validate={[required, maxLength30]}/>\n            </div>\n            <div>\n                <Field placeholder=\"My professional skills \" component={Textarea} name=\"lookingForAJobDescription\"\n                       type=\"text\"\n                       validate={[required, maxLength100]}/>\n            </div>\n            <div>\n                <Field placeholder=\"About me \" component={Textarea} name=\"aboutMe\" type=\"text\"\n                       validate={[required, maxLength100]}/>\n            </div>\n            <div>\n                <Field component=\"input\" name=\"lookingForAJob\" type=\"checkbox\"/> Looking for a job\n            </div>\n            <div>\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\n                return <div key={key}>\n                    {/* todo: create some solution for embedded objects */}\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n                </div>\n            })}\n            </div>\n            {props.error &&\n            <div>\n                <strong>{props.error}</strong>\n            </div>\n            }\n            <div>\n                <button>Save</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileInfoType, ProfileDataFormType>({form: \"profileForm\"})(ProfileForm)\n\nexport default ProfileDataFormReduxForm;\n\n\n\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\nimport style from \"./ProfileInfo.module.css\"\nimport avatarDefault from \"../../../assets/images/profile-picture.png\"\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\nimport {ProfileInfoType} from \"../../../redux/profileReducer\";\nimport {ProfileData} from \"./ProfileData\";\nimport ProfileDataForm from \"../ProfileDataForm\";\nimport {ProfileDataType} from \"../../../api/types/types\";\n\n\ntype ProfileInfoPropsType = {\n    profile: ProfileInfoType\n    status: string\n    updateProfileStatus: (status: string) => void\n    isOwnPhoto: boolean\n    savePhoto: (file: File) => void\n    updateProfileData: (data: ProfileDataType) => Promise<any>\n}\n\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    const [edit, setEdit] = useState(false)\n    const onSubmit = async (formData: ProfileInfoType) => {\n        await props.updateProfileData(formData)\n        setEdit(false)\n    }\n\n    const onMainPhotoSelected = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) {\n            if (e.target.files.length) {\n                props.savePhoto(e.target.files[0])\n            }\n        }\n    }, [props.savePhoto])\n\n    return (\n        <div className={style.mainBlock}>\n            <div className={style.descriptionBlock}>\n                <span className={style.profilePhoto}>\n                    <img src={props.profile.photos.large ? props.profile.photos.large : avatarDefault} alt=\"\"/>\n                    {props.isOwnPhoto &&\n                    <input className={\"customFileInput\"} type={\"file\"} onChange={onMainPhotoSelected}/>}\n                </span>\n                <ProfileStatusWithHooks\n                    status={props.status}\n                    updateProfileStatus={props.updateProfileStatus}/>\n                {edit\n                    ? <ProfileDataForm\n                        initialValues={props.profile}\n                        profile={props.profile}\n                        onSubmit={onSubmit}/>\n                    : <ProfileData\n                        profile={props.profile}\n                        isOwnPhoto={props.isOwnPhoto}\n                        onEdit={() => {\n                            setEdit(true)\n                        }}/>}\n            </div>\n        </div>\n    )\n}\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport style from './Post.module.css'\n\n\ntype PostPropsType = {\n    message: string\n    likeCounts: number\n}\n\nexport const Post: React.FC<PostPropsType> = (props) => {\n    return (\n        <div className={style.item}>\n            <img\n                src=\"https://st2.depositphotos.com/1006318/5909/v/950/depositphotos_59095529-stock-illustration-profile-icon-male-avatar.jpg\"\n                alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like </span> {props.likeCounts}\n            </div>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","import React, {useCallback} from \"react\"\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\"\nimport {Dispatch} from \"redux\";\nimport {Textarea} from \"../common/FormControls/FormControls\";\nimport {maxLength, required} from \"../utils/validators/validators\";\n\n\ntype LoginFormType = {\n    newPostBody: string\n}\nconst maxLength15 = maxLength(20)\nconst AddPostForm: React.FC<InjectedFormProps<LoginFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder=\"add new post\" component={Textarea} name=\"newPostBody\" type=\"text\"\n                       validate={[required, maxLength15]}/>\n            </div>\n            <div>\n                <button>Send message</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst ContactForm = reduxForm<LoginFormType>({\n    form: \"form\"\n})(AddPostForm)\n\n\ntype ProfileType = {\n    addPostFormHandler: (value: string) => void\n}\n\nexport const AddPost = (props: ProfileType) => {\n    const onSubmit = useCallback((formData: LoginFormType, dispatch: Dispatch) => {\n        props.addPostFormHandler(formData.newPostBody)\n        dispatch(reset(\"form\"))\n    }, [props.addPostFormHandler])\n    return (\n        <div>\n            <ContactForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {Post} from \"./Post/Post\";\nimport style from \"./MyPosts.module.css\"\nimport {PostDataType,} from \"../../../redux/profileReducer\";\nimport {AddPost} from \"../../../form/AddPostForm\";\n\n\nexport type MessagesPropsType = {\n    id: number\n    message: string\n    likesCounet: number\n}\n\nexport type DataType = {\n    data: Array<PostDataType>\n    addPost: (value: string) => void\n}\n\n\nexport const MyPosts = React.memo((props: DataType) => {\n\n    let postsElemets = props.data.map((m) => <Post key={m.id} message={m.message} likeCounts={m.likesCount}/>)\n\n\n    const addPostFormHandler = (value: string) => {\n        props.addPost(value)\n    }\n\n\n    return (\n        <div className={style.postsBlock}>\n            <div>\n                <h3>My Posts</h3>\n                <div>\n                    <AddPost addPostFormHandler={addPostFormHandler}/>\n                </div>\n                <div className={style.posts}>\n                    {postsElemets}\n                </div>\n            </div>\n        </div>\n    )\n})\n","import React from \"react\";\nimport {addPostActionCreator, PostDataType} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/reduxStore\";\n\n\ntype MapStateToPropsType = {\n    data: Array<PostDataType>\n}\n\ntype MapDispatchToPropsType ={\n    addPost: (value: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        data: state.profilePage.postsData,\n    }\n}\n\n\n\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType => {\n    return {\n        addPost: (value: string) => {\n            dispatch(addPostActionCreator(value))\n        }\n    }\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(MyPosts)","import React from \"react\";\nimport style from \"./Profile.module.css\"\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfoType} from \"../../redux/profileReducer\";\nimport {ProfileDataType} from \"../../api/types/types\";\n\n\n\ntype ProfilePropsType = {\n    profile: ProfileInfoType | null\n    status: string\n    updateProfileStatus: (status: string) => void\n    isOwnPhoto: boolean\n    savePhoto: (file: File) => void\n    updateProfileData: (data: ProfileDataType) => Promise<any>\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div className={style.profile}>\n            {props.profile\n                ? <ProfileInfo\n                    savePhoto={props.savePhoto}\n                    isOwnPhoto={props.isOwnPhoto}\n                    profile={props.profile}\n                    status={props.status}\n                    updateProfileStatus={props.updateProfileStatus}\n                    updateProfileData={props.updateProfileData}\n                />\n                : false}\n\n            <MyPostsContainer/>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {Profile} from \"./Profile\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\n\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {\n    getProfileStatusThunkCr,\n    getProfileThunk,\n    savePhotoSuccessThunkCr,\n    updateProfileDataThunkCr,\n    updateProfileStatusThunkCr\n} from \"../../redux/profileReducer\";\nimport {ProfileDataType} from \"../../api/types/types\";\n\n\n\ntype PathParamsType = {\n    userId: string\n}\n\n\ntype PropsType = RouteComponentProps<PathParamsType>\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\n\n\ntype MapDispatchToPropsType = {\n    getUserProfile: (userID: number) => void\n    getProfileStatus: (userID: number) => void\n    updateProfileStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    updateProfileData: (data: ProfileDataType) => Promise<any>\n}\n\n\ntype OwnProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType & PropsType & OwnPropsType\n\ntype OwnPropsType = {}\n\nclass ProfileContainer extends React.Component<OwnProfileContainerPropsType> {\n    constructor(props: OwnProfileContainerPropsType) {\n        super(props);\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getProfileStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n\n\n    }\n\n    componentDidUpdate(prevProps: OwnProfileContainerPropsType, prevState: OwnProfileContainerPropsType) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <><Profile\n                profile={this.props.profile}\n                status={this.props.status}\n                isOwnPhoto={!this.props.match.params.userId}\n                savePhoto={this.props.savePhoto}\n                updateProfileData={this.props.updateProfileData}\n                updateProfileStatus={this.props.updateProfileStatus}/> </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        userID: state.auth.userID,\n        authorizedUserId: state.auth.userID\n    }\n\n}\n\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\n    return (\n        {\n            getUserProfile: (userID: number) => {\n                dispatch(getProfileThunk(userID))\n            },\n            getProfileStatus: (userID: number) => {\n                dispatch(getProfileStatusThunkCr(userID))\n            },\n            updateProfileStatus: (status: string) => {\n                dispatch(updateProfileStatusThunkCr(status))\n            },\n            savePhoto: (file: File) => {\n                dispatch(savePhotoSuccessThunkCr(file))\n            },\n            updateProfileData: (data: ProfileDataType) => {\n                return dispatch(updateProfileDataThunkCr(data))\n            },\n        }\n\n    )\n}\n\nexport default compose<React.ComponentType>(connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps), withRouter, withAuthRedirect)(ProfileContainer)\n","import React, {ComponentType} from \"react\"\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/reduxStore\";\nimport {compose} from \"redux\";\n\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\ntype WithAuthRedirectType = {\n    isAuth: boolean\n}\n\n\nexport function withAuthRedirect<P>(Component: ComponentType<P>) {\n    let ContainerComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as P}/>\n    }\n\n\n    let WithAuthRedirectContainer = compose(connect(mapStateToProps))(ContainerComponent)\n    return WithAuthRedirectContainer\n}\n\n","export type ValidatorsType = (value: string) => string | undefined\n\n\nexport const required: ValidatorsType = (value) => value ? undefined : \"Field is required\"\n\n\ntype MaxLengthType = (max: number) => (value: string) => string | undefined\n\nexport const maxLength: MaxLengthType = (maxLength: number): ValidatorsType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n// value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\n\n"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","Field","validate","ObjPropNameType","ProfileStatusWithHooks","useState","edit","setEdit","status","setStatus","useEffect","style","autoFocus","onChange","e","currentTarget","value","onBlur","updateProfileStatus","onDoubleClick","Contact","contactTitle","contactValue","ProfileData","isOwnPhoto","Button","margin","variant","onClick","onEdit","profile","fullName","Object","keys","contacts","map","key","lookingForAJob","lookingForAJobDescription","aboutMe","maxLength30","maxLength","maxLength100","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","type","required","ProfileInfo","formData","updateProfileData","onMainPhotoSelected","useCallback","target","files","length","savePhoto","src","photos","large","avatarDefault","alt","ProfileDataForm","initialValues","Post","message","likeCounts","maxLength15","ContactForm","AddPost","dispatch","addPostFormHandler","newPostBody","reset","MyPosts","React","postsElemets","data","m","likesCount","id","addPost","compose","connect","state","profilePage","postsData","addPostActionCreator","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getProfileStatus","console","refreshProfile","prevProps","prevState","userID","auth","getProfileThunk","getProfileStatusThunkCr","updateProfileStatusThunkCr","file","savePhotoSuccessThunkCr","updateProfileDataThunkCr","withRouter","withAuthRedirect","mapStateToProps","isAuth","Component","to","undefined"],"sourceRoot":""}