{"version":3,"file":"static/js/252.95ca1382.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/common/FormControls/FormControls.module.css?d07c","common/FormControls/FormControls.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Messages.tsx","form/dialogForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControls\":\"FormControls_formControls__JFCnc\",\"error\":\"FormControls_error__Zkh-E\"};","import React from \"react\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport { ValidatorsType } from \"../../utils/validators/validators\"\nimport styles from \"./FormControls.module.css\"\n\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                                                         name: FormKeysType,\n                                                         validators: Array<ValidatorsType>,\n                                                         component: React.FC<WrappedFieldProps>,\n                                                         props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItem\":\"Dialogs_dialogsItem__VE52U\",\"messages\":\"Dialogs_messages__Cg2l+\",\"dialogName\":\"Dialogs_dialogName__RKOGC\",\"activeLink\":\"Dialogs_activeLink__mpzNi\",\"textArea\":\"Dialogs_textArea__SCzCA\"};","import style from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: string\n}\n\nexport const DialogItem = React.memo((props: DialogItemPropsType) => {\n    return (\n        <div className={style.dialogName + \" \" + style.active}>\n            <NavLink to={`/dialogs/${props.id}`} activeClassName={style.activeLink}>{props.name}</NavLink>\n        </div>\n    )\n})\n","import style from \"../Dialogs.module.css\";\nimport React from \"react\";\n\ntype MessagesPropsType = {\n    message: string\n}\nexport const Messages = React.memo((props: MessagesPropsType) => {\n    return (\n        <div className={style.dialog}>{props.message}</div>\n    )\n})\n","import React from \"react\"\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\"\nimport {Dispatch} from \"redux\";\nimport {maxLength, required } from \"../utils/validators/validators\";\nimport {Textarea} from \"../common/FormControls/FormControls\";\n\n\ntype LoginFormType = {\n    newMessageBody: string\n}\nconst maxLength15 = maxLength(15)\n\nconst DialogForm: React.FC<InjectedFormProps<LoginFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder=\"Enter your new message\" component={Textarea} name=\"newMessageBody\" type=\"text\" validate={[ required, maxLength15 ]}/>\n            </div>\n            <div>\n                <button>Send message</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst ContactForm = reduxForm<LoginFormType>({\n    form: \"form\"\n})(DialogForm)\n\n\ntype DialogType = {\n    addNewMessageBody: (value: string) => void\n}\n\nexport const Dialog = (props: DialogType) => {\n    const onSubmit = (formData: LoginFormType, dispatch: Dispatch) => {\n        props.addNewMessageBody(formData.newMessageBody)\n        dispatch(reset(\"form\"));\n    }\n    return (\n        <div>\n            <ContactForm onSubmit={onSubmit}/>\n        </div>\n    )\n}","import React from \"react\";\nimport style from \"./Dialogs.module.css\"\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Messages} from \"./Messages/Messages\";\nimport {Dialog} from \"../../form/dialogForm\";\n\n\nexport type DialogNamesType = {\n    id: string\n    name: string\n}\n\nexport type MessagesType = {\n    id: string\n    message: string\n    likesCount: number\n}\n\ntype DialogsPropsType = {\n    dialogs: Array<DialogNamesType>\n    messages: Array<MessagesType>\n    addPost: (value: string) => void\n}\n\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\n\n    let dialogsElement = props.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElement = props.messages.map((m) => <Messages key={m.id} message={m.message}/>)\n\n    const addNewMessageBody = (value: string) => {\n        props.addPost(value)\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.dialogsItem}>\n                {dialogsElement}\n            </div>\n            <div className={style.messages}>\n                {messagesElement}\n                <Dialog addNewMessageBody={addNewMessageBody}/>\n                <div>\n                </div>\n            </div>\n\n        </div>\n    )\n})\n","import React, {ComponentType} from \"react\";\nimport {addMessageActionCreator, DialogsType, MessageType,} from \"../../redux/messageReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {compose, Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n\ntype MapStateToPropsType = {\n    dialogs: DialogsType[]\n    messages: MessageType[]\n}\n\n\ntype MapDispatchToPropsType = {\n    addPost: (value: string) => void\n}\n\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogsData,\n        messages: state.dialogsPage.messagesData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (value: string) => {\n            dispatch(addMessageActionCreator(value))\n        }\n    }\n}\n\n\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)","import React, {ComponentType} from \"react\"\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/reduxStore\";\nimport {compose} from \"redux\";\n\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\ntype WithAuthRedirectType = {\n    isAuth: boolean\n}\n\n\nexport function withAuthRedirect<P>(Component: ComponentType<P>) {\n    let ContainerComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as P}/>\n    }\n\n\n    let WithAuthRedirectContainer = compose(connect(mapStateToProps))(ContainerComponent)\n    return WithAuthRedirectContainer\n}\n\n","export type ValidatorsType = (value: string) => string | undefined\n\n\nexport const required: ValidatorsType = (value) => value ? undefined : \"Field is required\"\n\n\ntype MaxLengthType = (max: number) => (value: string) => string | undefined\n\nexport const maxLength: MaxLengthType = (maxLength: number): ValidatorsType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n// value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\n\n"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","Field","validate","DialogItem","React","style","to","id","activeClassName","Messages","message","maxLength15","maxLength","ContactForm","reduxForm","form","onSubmit","handleSubmit","type","required","Dialog","formData","dispatch","addNewMessageBody","newMessageBody","reset","Dialogs","dialogsElement","dialogs","map","d","messagesElement","messages","m","value","addPost","compose","connect","state","dialogsPage","dialogsData","messagesData","addMessageActionCreator","withAuthRedirect","mapStateToProps","isAuth","auth","Component","undefined","length"],"sourceRoot":""}