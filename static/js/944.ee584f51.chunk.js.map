{"version":3,"file":"static/js/944.ee584f51.chunk.js","mappings":"4OACA,GAAgB,aAAe,mCAAmC,MAAQ,6B,+CCUpEA,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,iBAAKG,UAAWC,EAAAA,YAAqB,KAAOF,EAAWE,EAAAA,MAAe,IAAtE,WACI,yBACKH,IAEJC,IAAY,0BAAOF,QAKnBK,EAAwC,SAACC,GAClD,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBR,MAAd,OAAoCQ,EAApC,IACA,OAAO,SAACT,GAAD,kBAAiBS,GAAjB,cAAwB,uCAAcC,GAAWC,QAG/CC,EAAqC,SAACH,GAC/C,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBR,MAAd,OAAoCQ,EAApC,IACA,OAAO,SAACT,GAAD,kBAAiBS,GAAjB,cAAwB,oCAAWC,GAAWC,QAGlD,SAASE,EAAyCC,EACAC,EACAC,EACAC,GACwB,IAAxBR,EAAuB,uDAAf,GAAIS,EAAW,uDAAJ,GACxE,OAAO,4BACH,SAACC,EAAA,GAAD,QAAOL,YAAaA,EAAaC,KAAMA,EAChCK,SAAUJ,EACVC,UAAWA,GACPR,IAJR,IAKCS,O,uHCzBNG,GAAcC,EAAAA,EAAAA,GAAU,IAmCxBC,GAAcC,EAAAA,EAAAA,GAA6C,CAC7DC,KAAM,QADUD,EAhCmF,SAACf,GACpG,OACI,kBAAMiB,SAAUjB,EAAMkB,aAAtB,WACI,0BACI,SAAC,IAAD,CAAOb,YAAY,QAAQG,UAAWL,EAAAA,GAAOG,KAAK,QAAQa,KAAK,OACxDR,SAAU,CAACS,EAAAA,EAAUR,QAEhC,0BACI,SAAC,IAAD,CAAOP,YAAY,WAAWG,UAAWL,EAAAA,GAAOG,KAAK,WAAWa,KAAK,WAC9DR,SAAU,CAACS,EAAAA,EAAUR,QAEhC,4BACI,SAAC,IAAD,CAAOJ,UAAU,QAAQF,KAAK,aAAaa,KAAK,aADpD,kBAGCnB,EAAMN,QACP,yBACKM,EAAMN,QAEVM,EAAMqB,aACP,gBAAKC,IAAKtB,EAAMqB,WAAYE,IAAI,YAC/BvB,EAAMqB,aACP,SAAC,IAAD,CAAOhB,YAAY,kBAAkBG,UAAWL,EAAAA,GAAOG,KAAK,UAAUa,KAAK,OACpER,SAAU,CAACS,EAAAA,EAAUR,MAE5B,0BACI,8CAmBVY,EAAQC,EAAAA,MAAW,SAACzB,GAMtB,OAAIA,EAAM0B,QACC,SAAC,KAAD,CAAUC,GAAI,cAGrB,4BACI,mCACA,SAACb,EAAD,CAAaG,SAXJ,SAACW,GACd5B,EAAM6B,MAAMD,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAUxCX,WAAYrB,EAAMqB,mBAe/D,WAAeY,EAAAA,EAAAA,KAPS,SAACC,GACrB,MAAO,CACHR,OAAQQ,EAAMC,KAAKT,OACnBL,WAAYa,EAAMC,KAAKd,cAIS,CAACQ,MAAOO,EAAAA,IAAhD,CAA0DZ,I,4ECzFnD,IAAMJ,EAA2B,SAACiB,GAAD,OAAWA,OAAQC,EAAY,qBAK1DzB,EAA2B,SAACA,GAAD,OAAuC,SAACwB,GAC5E,GAAIA,EAAME,OAAS1B,EAAW,MAAM,iBAAN,OAAwBA,EAAxB","sources":["webpack://samurai-way/./src/common/FormControls/FormControls.module.css?d07c","common/FormControls/FormControls.tsx","components/Login/Login.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControls\":\"FormControls_formControls__JFCnc\",\"error\":\"FormControls_error__Zkh-E\"};","import React from \"react\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport { ValidatorsType } from \"../../utils/validators/validators\"\nimport styles from \"./FormControls.module.css\"\n\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                                                         name: FormKeysType,\n                                                         validators: Array<ValidatorsType>,\n                                                         component: React.FC<WrappedFieldProps>,\n                                                         props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\"\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\nimport {Input} from \"../../common/FormControls/FormControls\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {Redirect} from \"react-router-dom\";\n\ntype LoginFormPropsType = {\n    captchaUrl: string | null\n}\ntype LoginFormType = {\n    login: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\nconst maxLength15 = maxLength(30)\n\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormType, LoginFormPropsType> & LoginFormPropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder=\"Login\" component={Input} name=\"login\" type=\"text\"\n                       validate={[required, maxLength15]}/>\n            </div>\n            <div>\n                <Field placeholder=\"Password\" component={Input} name=\"password\" type=\"password\"\n                       validate={[required, maxLength15]}/>\n            </div>\n            <div>\n                <Field component=\"input\" name=\"rememberMe\" type=\"checkbox\"/> Remember me\n            </div>\n            {props.error &&\n            <div>\n                {props.error}\n            </div>}\n            {props.captchaUrl &&\n            <img src={props.captchaUrl} alt=\"captcha\"/>}\n            {props.captchaUrl &&\n            <Field placeholder=\"Symbol anti-bot\" component={Input} name=\"captcha\" type=\"text\"\n                   validate={[required, maxLength15]}/>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst ContactForm = reduxForm<LoginFormType, LoginFormPropsType>({\n    form: \"form\"\n})(LoginForm)\n\n\ntype LoginPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n    isAuth: boolean\n    captchaUrl: string | null\n}\n\n\nconst Login = React.memo((props: LoginPropsType) => {\n    const onSubmit = (formData: LoginFormType) => {\n        props.login(formData.login, formData.password, formData.rememberMe, formData.captcha)\n\n\n    }\n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"}/>\n    }\n    return (\n        <div>\n            <h1>Login</h1>\n            <ContactForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\n        </div>\n    )\n})\ntype MapStateToPropsType = {\n    isAuth: boolean\n    captchaUrl: string | null\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaUrl: state.auth.captchaUrl\n    }\n}\n\nexport default connect(mapStateToProps, {login: loginTC})(Login)\n","export type ValidatorsType = (value: string) => string | undefined\n\n\nexport const required: ValidatorsType = (value) => value ? undefined : \"Field is required\"\n\n\ntype MaxLengthType = (max: number) => (value: string) => string | undefined\n\nexport const maxLength: MaxLengthType = (maxLength: number): ValidatorsType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n// value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\n\n"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","Field","validate","maxLength15","maxLength","ContactForm","reduxForm","form","onSubmit","handleSubmit","type","required","captchaUrl","src","alt","Login","React","isAuth","to","formData","login","password","rememberMe","captcha","connect","state","auth","loginTC","value","undefined","length"],"sourceRoot":""}