{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","redux/state.ts","components/Header/Header.tsx","components/NavBar/NavBar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx","components/NavBar/NavBar.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","_state","profilePage","postsData","id","v1","message","likesCount","newPostText","dialogsPage","dialogsData","name","messagePage","messagesData","newPageMessage","callSubscriber","console","log","subscribe","abserver","this","getState","dispatch","action","type","newPost","push","newText","newMessage","Header","className","style","header","src","alt","NavBar","nav","item","to","activeClassName","activeLink","Post","props","likeCounts","MyPosts","postsElemets","data","map","m","newPostElement","React","createRef","postsBlock","value","ref","onChange","e","current","onClick","posts","ProfileInfo","descriptionBlock","Profile","profile","DialogItem","dialogName","active","Messages","dialog","Dialogs","dialogsElement","dialogs","d","messagesElement","messages","newMessageElement","dialogsItem","App","state","path","render","bind","rerenderEntireTree","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7052ddaf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2lR7J\",\"dialogsItem\":\"Dialogs_dialogsItem__2chWO\",\"messages\":\"Dialogs_messages__3075e\",\"dialogName\":\"Dialogs_dialogName__1N0ra\",\"activeLink\":\"Dialogs_activeLink__3UnWy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2q0dm\",\"posts\":\"MyPosts_posts__3sv7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__19Q9k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3vOcw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__l0DkD\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from 'uuid';\n\n\nexport type MessageType = {\n    id: string\n    message: string\n    likesCount: number\n}\n\nexport type DialogsType = {\n    id: string\n    name: string\n}\n\nexport type PostDataType = {\n    id: string\n    message: string\n    likesCount: number\n}\n\nexport type MessagePageType = {\n    messagesData: Array<MessageType>\n    newPageMessage: string\n}\n\nexport type DialogsPageType = {\n    dialogsData: Array<DialogsType>\n}\n\nexport type ProfilePageType = {\n    postsData: Array<PostDataType>\n    newPostText: string\n}\n\nexport type StateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    messagePage: MessagePageType\n}\n\n/*export type AddPostActionType = {\n    type: 'ADD-POST'\n}*/\n\n/*export type UpdateNewPostTextActionType = {\n    type: 'UPDATE-NEW-POST-TEXT'\n    newText: string\n}*/\n\n//export type ActionsType = AddPostActionType | UpdateNewPostTextActionType\nexport type ActionsType =\n    ReturnType<typeof addPostActionCreator>\n    | ReturnType<typeof updateNewPostTextActionCreator>\n    | ReturnType<typeof addMessageActionCreator>\n    | ReturnType<typeof updateMessageActionCreator>\n\n\nexport type StoreType = {\n    _state: StateType\n    /*updateNewPostText: (newText: string) => void\n    addPost: () => void*/\n    callSubscriber: () => void\n    subscribe: (abserver: () => void) => void\n    getState: () => StateType\n    dispatch: (action: ActionsType) => void\n}\n\nexport const store: StoreType = {\n    _state: {\n        profilePage: {\n            postsData: [\n                {id: v1(), message: 'Hello my friend!', likesCount: 22},\n                {id: v1(), message: 'Hello samurai!', likesCount: 12},\n                {id: v1(), message: 'You are the best!', likesCount: 24},\n                {id: v1(), message: 'Good night!', likesCount: 15},\n            ],\n            newPostText: 'it-kamasutra.com'\n        },\n        dialogsPage: {\n            dialogsData: [\n                {id: v1(), name: 'Dimych'},\n                {id: v1(), name: 'Sveta'},\n                {id: v1(), name: 'Valera'},\n                {id: v1(), name: 'Victor'},\n                {id: v1(), name: 'Sasha'},\n                {id: v1(), name: 'Andrey'},\n                {id: v1(), name: 'Igor'},\n            ]\n        },\n        messagePage: {\n            messagesData: [\n                {id: v1(), message: 'Hello', likesCount: 22},\n                {id: v1(), message: 'How is your learning?', likesCount: 36},\n                {id: v1(), message: 'Yo', likesCount: 23},\n                {id: v1(), message: 'You good!', likesCount: 55},\n                {id: v1(), message: 'My name is Mike', likesCount: 12},\n            ], newPageMessage: ''\n        }\n\n    },\n    /*updateNewPostText(newText: string) {\n        this._state.profilePage.newPostText = newText\n        this.callSubscriber()\n    },\n    addPost() {\n        let newPost: PostDataType = {\n            id: v1(),\n            message: this._state.profilePage.newPostText,\n            likesCount: 0\n        }\n        this._state.profilePage.postsData.push(newPost)\n        this._state.profilePage.newPostText = ''\n        this.callSubscriber()\n    },*/\n    callSubscriber() {\n        console.log('State chenged')\n    },\n    subscribe(abserver) {\n        this.callSubscriber = abserver\n    },\n    getState() {\n        return this._state\n    },\n\n    dispatch(action) {\n        if (action.type === 'ADD-POST') {\n            const newPost: PostDataType = {\n                id: v1(),\n                message: this._state.profilePage.newPostText,\n                likesCount: 0\n            }\n            this._state.profilePage.postsData.push(newPost)\n            this._state.profilePage.newPostText = '';\n            this.callSubscriber();\n        } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\n            if (action.newText != null) {\n                this._state.profilePage.newPostText = action.newText;\n            }\n            this.callSubscriber()\n        } else if (action.type === 'ADD-MESSAGE') {\n            const newMessage: MessageType = {\n                id: v1(),\n                message: this._state.messagePage.newPageMessage,\n                likesCount: 0\n            }\n            this._state.messagePage.messagesData.push(newMessage)\n            this._state.messagePage.newPageMessage = '';\n            this.callSubscriber();\n        } else if (action.type === 'UPDATE-NEW-MESSAGE-TEXT') {\n            if (action.newPageMessage != null) {\n                this._state.messagePage.newPageMessage = action.newPageMessage;\n            }\n            this.callSubscriber()\n        }\n\n    }\n}\n\n/*export const addPostActionCreator = ():AddPostActionType => ({type: 'ADD-POST'})\n\nexport const updateNewPostTextActionCreator = (text: string):UpdateNewPostTextActionType => (\n    {type: 'UPDATE-NEW-POST-TEXT', newText: text}\n)*/\n\nexport const addPostActionCreator = () => ({type: 'ADD-POST'} as const)\n\nexport const updateNewPostTextActionCreator = (text: string) => (\n    {type: 'UPDATE-NEW-POST-TEXT', newText: text} as const\n)\n\nexport const addMessageActionCreator = () => ({type: 'ADD-MESSAGE'} as const)\n\nexport const updateMessageActionCreator = (text: string) => (\n    {type: 'UPDATE-NEW-MESSAGE-TEXT', newPageMessage: text} as const\n)","import React from \"react\";\r\nimport style from \"./Header.module.css\"\r\n\r\nexport const Header = () => {\r\n    return (\r\n            <header className={style.header}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT4MuXyd8KEmHlFuKFbMftU-rcm3zcORkaQCw&usqp=CAU\"\r\n                    alt=\"logo\"/>\r\n            </header>\r\n    )\r\n}","import React from 'react';\r\nimport style from './NavBar.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const NavBar = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/profile\" activeClassName={style.activeLink}>Profile</NavLink></div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={style.activeLink}>Dialogs</NavLink></div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/news\" activeClassName={style.activeLink}>News</NavLink></div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/music\" activeClassName={style.activeLink}>Music</NavLink></div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/settings\" activeClassName={style.activeLink}>Settings</NavLink></div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport style from './Post.module.css'\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img\r\n                src=\"https://st2.depositphotos.com/1006318/5909/v/950/depositphotos_59095529-stock-illustration-profile-icon-male-avatar.jpg\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span> {props.likeCounts}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, ChangeEventHandler, KeyboardEvent, useState} from 'react';\r\nimport {Post} from './Post/Post';\r\nimport style from './MyPosts.module.css'\r\nimport {\r\n    ActionsType,\r\n    addPostActionCreator,\r\n    /*AddPostActionType,*/\r\n    PostDataType, updateNewPostTextActionCreator,\r\n    /*UpdateNewPostTextActionType*/\r\n} from '../../../redux/state';\r\n\r\n\r\nexport type MessagesPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCounet: number\r\n}\r\n\r\nexport type DataType = {\r\n    data: Array<PostDataType>\r\n    /*addPost: () => void*/\r\n    newPostText: string\r\n    /*updatePostText: (text: string) => void*/\r\n    dispatch: (action: ActionsType) => void\r\n}\r\n\r\n\r\nexport const MyPosts = (props: DataType) => {\r\n\r\n\r\n    let postsElemets = props.data.map((m) => <Post key={m.id} message={m.message} likeCounts={m.likesCount}/>)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const addPostHandler = () => {\r\n        props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (newPostElement.current) {\r\n            props.dispatch(updateNewPostTextActionCreator(newPostElement.current.value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <div>\r\n                <h3>My Posts</h3>\r\n                <div>\r\n                    <div>\r\n                        <textarea\r\n                            value={props.newPostText}\r\n                            ref={newPostElement}\r\n                            onChange={onChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={addPostHandler}>Add post</button>\r\n                    </div>\r\n                </div>\r\n                <div className={style.posts}>\r\n                    {postsElemets}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","\nimport {MyPosts} from '../MyPosts/MyPosts';\nimport React from 'react';\nimport style from './ProfileInfo.module.css'\n\nexport const ProfileInfo = () => {\n    return (\n        <div>\n            <div>\n                <img src=\"https://hbr.org/resources/images/article_assets/2021/04/Apr21_16_1249623281.jpg\" alt=\"\"/>\n            </div>\n            <div className={style.descriptionBlock}>\n                ava + description\n            </div>\n        </div>\n    )\n}","import React from 'react';\r\nimport style from './Profile.module.css'\r\nimport {MessagesPropsType, MyPosts} from './MyPosts/MyPosts';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {ActionsType, /*AddPostActionType,*/ PostDataType, /*UpdateNewPostTextActionType*/} from '../../redux/state';\r\n\r\ntype ProfilePropsType = {\r\n    posts: Array<PostDataType>\r\n    /*addPost: () => void*/\r\n    newPostText: string\r\n    /*updatePostText:(text: string) => void*/\r\n    dispatch: (action: ActionsType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            <ProfileInfo/>\r\n            <MyPosts data={props.posts}\r\n                     dispatch={props.dispatch}\r\n                     newPostText={props.newPostText}\r\n                /*updatePostText={props.updatePostText}*/\r\n            />\r\n        </div>\r\n    )\r\n}","import style from '../Dialogs.module.css';\nimport {NavLink} from 'react-router-dom';\nimport React from 'react';\n\ntype DialogItemPropsType = {\n    name:string\n    id: string\n}\n\nexport const DialogItem = (props:DialogItemPropsType) => {\n    return(\n        <div className={style.dialogName + ' ' + style.active}>\n            <NavLink to={`/dialogs/${props.id}`} activeClassName={style.activeLink}>{props.name}</NavLink>\n        </div>\n    )\n}","import style from '../Dialogs.module.css';\nimport React from 'react';\n\ntype MessagesPropsType = {\n    message: string\n}\nexport const Messages = (props: MessagesPropsType) => {\n    return (\n            <div className={style.dialog}>{props.message}</div>\n    )\n}","import React, {ChangeEvent, RefObject} from 'react';\nimport {NavLink} from 'react-router-dom';\nimport style from './Dialogs.module.css'\nimport {DialogItem} from './DialogItem/DialogItem';\nimport {Messages} from './Messages/Messages';\nimport {\n    ActionsType,\n    addMessageActionCreator,\n    updateMessageActionCreator,\n    updateNewPostTextActionCreator\n} from '../../redux/state';\n\nexport type DialogNamesType = {\n    id: string\n    name: string\n}\n\nexport type MessagesType = {\n    id: string\n    message: string\n    likesCount: number\n}\n\ntype DialogsPropsType = {\n    newMessage: string\n    dialogs: Array<DialogNamesType>\n    messages: Array<MessagesType>\n    dispatch: (action: ActionsType) => void\n}\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n    let dialogsElement = props.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElement = props.messages.map((m) => <Messages key={m.id} message={m.message}/>)\n\n    let newMessageElement: RefObject<HTMLTextAreaElement> = React.createRef()\n\n    let addPostHandler = () => {\n        if (newMessageElement.current) {\n            props.dispatch(addMessageActionCreator())\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        if (newMessageElement.current) {\n            props.dispatch(updateMessageActionCreator(newMessageElement.current.value))\n        }\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.dialogsItem}>\n                {dialogsElement}\n            </div>\n            <div className={style.messages}>\n                {messagesElement}\n                <div>\n                    <textarea ref={newMessageElement}\n                              onChange={onChangeHandler}\n                              value={props.newMessage}\n                    ></textarea>\n                </div>\n                <div>\n                    <button onClick={addPostHandler}>Add post</button>\n                </div>\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Header} from './components/Header/Header';\nimport {NavBar} from './components/NavBar/NavBar';\nimport {Profile} from './components/Profile/Profile';\nimport {Dialogs} from './components/Dialogs/Dialogs';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {\n    ActionsType, /*AddPostActionType,*/\n    StateType,\n    StoreType, /*UpdateNewPostTextActionType,*/\n} from './redux/state';\n\ntype AppPropsType = {\n    store: StoreType\n    /*addPost: () => void\n    updatePostText: (text: string) => void*/\n    dispatch: (action: ActionsType) => void\n\n}\n\nconst App = (props: AppPropsType) => {\n    const state = props.store.getState()\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <NavBar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/dialogs\" render={() => <Dialogs dialogs={state.dialogsPage.dialogsData}\n                                                                  messages={state.messagePage.messagesData}\n                                                                  newMessage={state.messagePage.newPageMessage}\n                                                                  dispatch={props.store.dispatch.bind(props.store)}\n                    />}/>\n                    <Route path=\"/profile\" render={() => <Profile posts={state.profilePage.postsData}\n                                                                  newPostText={state.profilePage.newPostText}\n                                                                  dispatch={props.store.dispatch.bind(props.store)}\n                        /*updatePostText={props.store.updateNewPostText.bind(props.store)}*/\n                    />}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {StateType, store,} from './redux/state';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\n\n\nlet rerenderEntireTree = (state: StateType) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App\n                store={store}\n                dispatch={store.dispatch.bind(store)}\n                /*updatePostText={store.updateNewPostText.bind(store)}*/\n            />\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n}\n\n\nrerenderEntireTree(store.getState())\n\nstore.subscribe(() => rerenderEntireTree(store.getState()))\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__3BPEs\",\"item\":\"NavBar_item__3E528\",\"activeLink\":\"NavBar_activeLink__1U3eL\"};"],"sourceRoot":""}